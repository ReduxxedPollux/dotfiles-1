[user]
	name = saaguero
	email = aguerosantiale@gmail.com
[credential]
	helper = cache --timeout=31556926
[alias]
    st = status -sb
    ci = commit --verbose
    co = checkout
    di = diff
    dc = diff --cached
    amend = commit --amend
    aa = add --all
    ff = merge --ff-only
    pullff = pull -ff-only
    pu = pull
    noff = merge --no-ff
    fa = fetch --all
    pom = push origin master
    b = branch
    ds = diff --stat=160,120
    dh1 = diff HEAD~1

    # Fancy logging.
    #   he = head
    #   r = recent commits, only current branch
    #   ra = recent commits, all reachable refs
    #   l = all commits, only current branch
    #   la = all commits, all reachable refs
    head = !git r -1
    he = !git head
    r = !GIT_NO_PAGER=1 git l -30
    ra = !git r --all
    l = "!. ~/.githelpers && pretty_git_log"
    la = !git l --all
    gl = log --oneline --decorate --graph
    # View abbreviated SHA, description, and history graph of the latest 20 commits
	; l = log --pretty=oneline -n 20 --graph --abbrev-commit
	; # View the current working tree status using the short format
	; s = status -s
	; # Show the diff between the latest commit and the current state
	; d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	; # `git di $number` shows the diff between the state `$number` revisions ago and the current state
	; di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	; # Pull in remote changes for the current repository and all its submodules
	; p = !"git pull; git submodule foreach git pull origin master"
	; # Clone a repository including all submodules
	; c = clone --recursive
	; # Commit all changes
	; ca = !git add -A && git commit -av
	; # Switch to a branch, creating it if necessary
	; go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	; # Show verbose output about tags, branches or remotes
	; tags = tag -l
	; branches = branch -a
	; remotes = remote -v
	; # Credit an author on the latest commit
	; credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	; # Interactive rebase with the given number of latest commits
	; reb = "!r() { git rebase -i HEAD~$1; }; r"
	; # Find branches containing commit
	; fb = "!f() { git branch -a --contains $1; }; f"
	; # Find tags containing commit
	; ft = "!f() { git describe --always --contains $1; }; f"
	; # Find commits by source code
	; fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	; # Find commits by commit message
	; fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	; # Remove branches that have already been merged with master
	; dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of
	# a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

[color]
	ui = auto

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
[url "https://github.com/"]
	insteadOf = git://github.com/

[merge]
    tool = vimdiff

[push]
    default = matching
