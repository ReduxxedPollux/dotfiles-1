[user]
	name = Santiago AgÃ¼ero
	email = aguerosantiale@gmail.com
[credential]
	helper = cache --timeout=31556926
[alias]
    st = status -sb
    ci = commit --verbose
    co = checkout
    di = diff
    dc = diff --cached
    amend = commit --amend
    aa = add --all
    ff = merge --ff-only
    pullff = pull -ff-only
    pu = pull
    noff = merge --no-ff
    fa = fetch --all
    pom = push origin master
    b = branch
    ds = diff --stat=160,120
    dh1 = diff HEAD~1

    # Fancy logging.
    #   he = head
    #   r = recent commits, only current branch
    #   ra = recent commits, all reachable refs
    #   l = all commits, only current branch
    #   la = all commits, all reachable refs
    head = !git r -1
    he = !git head
    r = !GIT_NO_PAGER=1 git l -30
    ra = !git r --all
    l = "!. ~/.githelpers && pretty_git_log"
    la = !git l --all
    gl = log --oneline --decorate --graph

    # easy rebasing (read http://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html)
    cif = commit --fixup=HEAD
    squash = rebase -i --autosquash

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"
    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S\"$1\"; }; f"
    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=\"$1\"; }; f"

    # taken from https://blog.jez.io/cli-code-review/
    # REVIEW_BASE should exist (defaults to 'master' in my bashrc)

    # list files which have changed since REVIEW_BASE 
    files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\")
    # Same as above, but with a diff stat instead of just names (better for interactive use)
    stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")
    heatmap = !$HOME/dotfiles/bin/git-heatmap

    # Open all files changed since REVIEW_BASE in Vim tabs. Then, run fugitive's :Gdiff in each tab, and finally tell vim-gitgutter to show +/- for changes since REVIEW_BASE
    review = !vim -p $(git files) +\"tabdo Gdiff $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"
    # Same as the above, except specify names of files as arguments, instead of opening all files:  git reviewone foo.js bar.js
    reviewone = !vim -p +\"tabdo Gdiff $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

[color]
	ui = auto

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
[url "https://github.com/"]
	insteadOf = git://github.com/

[merge]
    tool = vimdiff

[push]
    default = matching
